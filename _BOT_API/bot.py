from telebot import types
from _SITE_API.functions import *
from _BOT_API import bot

help_str = '/lowprice - –£–∑–Ω–∞—Ç—å —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n\n' \
           '/highprice - –£–∑–Ω–∞—Ç—å —Ç–æ–ø —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n\n' \
           '/bestdeal - –£–∑–Ω–∞—Ç—å —Ç–æ–ø –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\n\n' \
           '/history - –£–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π\n\n'


@bot.message_handler(commands=['start'])
def send_welcome(message):

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–µ–ª–µ–π.')
    get_city(message)


def get_city(message):

    city = bot.send_message(message.chat.id, "–ì–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?")
    bot.register_next_step_handler(city, get_id)


@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.send_message(message.chat.id, '–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–µ–ª–µ–π\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n' + help_str)


@bot.message_handler(commands=['lowprice'])
def low(message, destination_id, count_print):

    if destination_id == 0 or count_print == 0:
        print(2)
        get_city(message)

    response = site_low_req(destination_id, count_print)

    for item in json.loads(response.text)["data"]["propertySearch"]["properties"]:
        bot.send_message(message.chat.id,
            "{}\n–û—Ç–∑—ã–≤—ã {}/10 ({})\n–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:{}\n{}üåü\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {}\n".format(
                 item["name"],
                 item["reviews"]["score"],
                 item["reviews"]["total"],
                 item["price"]["lead"]["formatted"],
                 item["star"],
                 item["destinationInfo"]["distanceFromDestination"]["value"]
            ))


def get_min_cost(message, destination_id, count_print):
    min_cost = message.text
    max_cost_m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É\n(–º–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞)")
    bot.register_next_step_handler(max_cost_m, get_max_cost, destination_id, count_print, min_cost)


def get_max_cost(message, destination_id, count_print, min_cost, max_cost=0):

    if max_cost == 0:
        max_cost = message.text

    try:
        if int(min_cost) > int(max_cost):
            bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            best_deal(message, destination_id, count_print)
            return

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        best_deal(message, destination_id, count_print)

    min_star = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥")
    bot.register_next_step_handler(min_star, get_min_star, destination_id, count_print, min_cost, max_cost)


def get_min_star(message, destination_id, count_print, min_cost, max_cost):
    min_star = message.text
    stars_count = []

    if min_star == "1":
        stars_count = ["10", "20", "30", "40", "50"]
    elif min_star == "2":
        stars_count = ["20", "30", "40", "50"]
    elif min_star == "3":
        stars_count = ["30", "40", "50"]
    elif min_star == "4":
        stars_count = ["40", "50"]
    elif min_star == "5":
        stars_count = ["50"]
    else:
        err_star = bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
        get_max_cost(err_star, destination_id, count_print, min_cost, max_cost)
        return

    send_best(message, destination_id, count_print, min_cost, max_cost, stars_count)


def send_best(message, destination_id, count_print, min_cost, max_cost, stars_count):

    response = site_best_req(destination_id, count_print, min_cost, max_cost, stars_count)

    for item in json.loads(response.text)["data"]["propertySearch"]["properties"]:
        bot.send_message(message.chat.id,
             "{}\n–û—Ç–∑—ã–≤—ã {}/10 ({})\n–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:{}\n{}üåü\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {}\n".format(
                 item["name"],
                 item["reviews"]["score"],
                 item["reviews"]["total"],
                 item["price"]["lead"]["formatted"],
                 item["star"],
                 item["destinationInfo"]["distanceFromDestination"]["value"]
             ))


@bot.message_handler(commands=['bestdeal'])
def best_deal(message, destination_id, count_print):

    if destination_id == 0 or count_print == 0:
        get_city(message)
        return

    min_cost_m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É\n(–º–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞)")
    bot.register_next_step_handler(min_cost_m, get_min_cost, destination_id, count_print)


@bot.message_handler(commands=['history'])
def history(message):
    bot.reply_to(message, "Func history")


@bot.message_handler(func=lambda x: False)
def menu_button(message, destination_id, count_print):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item_low = types.KeyboardButton("–¢–æ–ø –¥–µ—à–µ–≤—ã—Ö")
    item_choice = types.KeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π")

    markup.add(item_low, item_choice)
    choice = bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=markup)
    bot.register_next_step_handler(choice, ans_all, destination_id, count_print)


def get_id(message):

    destination_id, name = site_get_id(message.text)
    if destination_id:
        bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫: \n{}".format(name))
        count_message = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å? (–¥–æ 24)")
        bot.register_next_step_handler(count_message, get_count, destination_id)
    else:
        bot.send_message(message.chat.id,
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã—Ö –æ {} –ø–æ–∫–∞ –Ω–µ—Ç.\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'.format(
                message.text))
        get_city(message)


def get_count(message, destination_id):
    if message.text.isdigit() and (0 < int(message.text) < 26):
        count_print = int(message.text)
        menu_button(message, destination_id, count_print)
    else:
        count = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å? (–¥–æ 25)")
        bot.register_next_step_handler(count, get_count, destination_id)


@bot.message_handler(content_types=["text"])
def ans_all(message, destination_id=0, count_print=0):
    if message.text == '–¢–æ–ø –¥–µ—à–µ–≤—ã—Ö':
        print(1)
        low(message, destination_id, count_print)
    elif message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π":
        best_deal(message, destination_id, count_print)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - /help')
